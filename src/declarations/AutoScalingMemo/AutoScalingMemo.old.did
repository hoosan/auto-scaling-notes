type UserId__1 = principal;
type UserId = principal;
type Result_3 = 
 variant {
   err: text;
   ok: DefiniteMemo;
 };
type Result_2 = 
 variant {
   err: text;
   ok: vec DatastoreCanisterId;
 };
type Result_1 = 
 variant {
   err: text;
   ok: DatastoreCanisterId;
 };
type Result = 
 variant {
   err: text;
   ok: UserId;
 };
type MemoId__1 = nat;
type MemoId = nat;
type DefiniteMemo = 
 record {
   canisterId: DatastoreCanisterId__1;
   content: text;
   createdAt: int;
   id: MemoId__1;
   tags: vec text;
   title: text;
   updatedAt: int;
   userId: UserId__1;
 };
type DatastoreCanisterId__1 = principal;
type DatastoreCanisterId = principal;
type Byte = nat;
service : {
  balance: () -> (nat) query;
  count: () -> (nat) query;
  createMemo: (text, vec text, text) -> (Result_3);
  currentDatastoreCanisterId: () -> (Result_1) query;
  datastoreCanisterIds: () -> (Result_2) query;
  getCanisterIdByMemoId: (MemoId) -> (Result_1) query;
  isRegistered: () -> (bool) query;
  numberOfDataPerCanister: () -> (nat) query;
  register: () -> (Result);
  sizeOfDatastoreCanisterIds: () -> (nat) query;
  userId: () -> (Result) query;
}
