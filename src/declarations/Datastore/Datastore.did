type UserId__1 = principal;
type UserId = principal;
type Self = 
 service {
   createMemo: (UserId__1, principal, MemoId, text, vec text, text) ->
    (Result);
   deleteMemo: (MemoId) -> (Result_1);
   getAllMemos: () -> (vec DefiniteMemo) query;
   getMemoById: (MemoId) -> (Result) query;
   updateMemo: (MemoId, opt text, opt vec text, opt text) -> (Result);
 };
type Result_1 = 
 variant {
   err: text;
   ok: MemoId;
 };
type Result = 
 variant {
   err: text;
   ok: DefiniteMemo;
 };
type MemoId__1 = nat;
type MemoId = nat;
type DefiniteMemo = 
 record {
   canisterId: DatastoreCanisterId;
   content: text;
   createdAt: int;
   id: MemoId__1;
   tags: vec text;
   title: text;
   updatedAt: int;
   userId: UserId;
 };
type DatastoreCanisterId = principal;
type Byte = nat;
service : (Byte) -> Self
